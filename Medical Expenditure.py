# -*- coding: utf-8 -*-
"""Medical Expenditure Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CCk_BLdoiSBRbZ_deR8M3oTgv-nWwG3c

Loading Dataset
"""

medical_charges_url = 'https://raw.githubusercontent.com/JovianML/opendatasets/master/data/medical-charges.csv'

from urllib.request import urlretrieve
urlretrieve(medical_charges_url, 'medical.csv')

import pandas as pd
medical_df = pd.read_csv('medical.csv')

"""Analysing Dataset"""

medical_df.info()

medical_df.describe()

import plotly.express as px
import matplotlib
import matplotlib.pyplot as plt
import seaborn as sns

matplotlib.rcParams['font.size'] = 14
matplotlib.rcParams['figure.figsize'] = (10, 6)

medical_df.age.describe()

fig = px.histogram(medical_df, x = 'age', marginal = 'box',
                   nbins=47, title='Distribution of age')
fig.update_layout(bargap=0.1)
fig.show()

fig = px.histogram(medical_df, x = 'bmi', marginal = 'box',
                   color_discrete_sequence=['pink'], title='Distribution of BMI')
fig.update_layout(bargap=0.5)
fig.show()

fig = px.histogram(medical_df, x='charges', marginal='box', color='smoker',
                   color_discrete_sequence=['pink', 'blue'], title='Annual Medical Charges')
fig.update_layout(bargap=0.1)
fig.show()

fig = px.histogram(medical_df, x='charges', marginal='box', color='sex', color_discrete_sequence=['pink', 'blue'])
fig.update_layout(bargap=0.1)
fig.show()

medical_df.smoker.value_counts()

f = px.histogram(medical_df, x='smoker', color='sex',
                 color_discrete_sequence=['pink', 'blue'], title='Smoker')
f.update_layout(bargap=0.1)
f.show()

fig = px.scatter(medical_df, x='age', y='charges', color='smoker',
      opacity=0.7, hover_data=['sex', 'region'], title='Age vs Charges')
fig.update_traces(marker_size=5)
fig.show()

"""Correlation Coefficient"""

medical_df.charges.corr(medical_df.age)

medical_df.charges.corr(medical_df.bmi)

medical_df.charges.corr(medical_df.children)

smoker_values = {'no':0, 'yes':1}
smoker_numeric = medical_df.smoker.map(smoker_values)
medical_df.charges.corr(smoker_numeric)

"""Corerelation Matrix"""

medical_df.corr()

sns.heatmap(medical_df.corr(), cmap='Reds', annot=True)
plt.title('Correlation Coefficient');

"""Scikit Learn"""

!pip install scikit-learn --quiet

from sklearn.linear_model import LinearRegression

inputs, targets = medical_df[['age']], medical_df['charges']
model = LinearRegression().fit(inputs, targets)
predictions = model.predict(inputs)
loss = rmse(targets, predictions)
print('Loss', loss)

"""Linear Regression using multiple features"""

fig = px.scatter_3d(non_smokers_df, x='age', y='bmi', z='charges')
fig.update_traces(marker_size = 3, marker_opacity = 0.5)
#fig.show()

inputs, targets = medical_df[['age', 'bmi']], medical_df[['charges']]
model = LinearRegression().fit(inputs, targets)
predictions = model.predict(inputs)

print(medical_df[['age','bmi']],predictions)

inputs, targets = medical_df[['age', 'bmi', 'children']], medical_df[['charges']]

model = LinearRegression().fit(inputs, targets)

predictions = model.predict(inputs)

print(medical_df[['age','bmi','children']],predictions)

"""Converting categorical values into numbers"""

sns.barplot(data=medical_df, x='smoker', y='charges');

smoker_codes = {'no': 0, 'yes': 1}
medical_df['smoker_code'] = medical_df.smoker.map(smoker_codes)

medical_df.charges.corr(medical_df.smoker_code)

medical_df

inputs, targets = medical_df[['age', 'bmi', 'children', 'smoker_code']], medical_df['charges']

model = LinearRegression().fit(inputs, targets)

predictions = model.predict(inputs)

print(medical_df[['age','bmi','children','smoker_code']],predictions)

sns.barplot(data=medical_df, x="sex", y="charges")

sex_codes = {'female':0, 'male':1}

medical_df["sex_code"] = medical_df.sex.map(sex_codes)

medical_df.charges.corr(medical_df.sex_code)

inputs, targets = medical_df[['age', 'bmi', 'children', 'smoker_code', 'sex_code']], medical_df['charges']

model = LinearRegression().fit(inputs, targets)

predictions = model.predict(inputs)

print(medical_df[['age', 'bmi', 'children', 'smoker_code', 'sex_code']],predictions)

sns.barplot(data = medical_df, x='region', y='charges')

"""One hot encoding"""

from sklearn import preprocessing
enc = preprocessing.OneHotEncoder()
enc.fit(medical_df[['region']])
enc.categories_

one_hot = enc.transform(medical_df[['region']]).toarray()
one_hot

medical_df[['northeast', 'northwest', 'southeast', 'southwest']] = one_hot
medical_df

input_cols = ['age', 'bmi', 'children', 'smoker_code',
                              'sex_code', 'northeast', 'northwest', 'southeast', 'southwest']
inputs, targets = medical_df[input_cols], medical_df['charges']

model = LinearRegression().fit(inputs, targets)

predictions = model.predict(inputs)

print(medical_df[['age', 'bmi', 'children', 'smoker_code',
                              'sex_code', 'northeast', 'northwest', 'southeast', 'southwest']],predictions)

"""Scaling the values in numeric columns"""

from sklearn.preprocessing import StandardScaler

numeric_cols = ['age', 'bmi', 'children']
scaler = StandardScaler()
scaler.fit(medical_df[numeric_cols])

scaled_inputs = scaler.transform(medical_df[numeric_cols])

cat_cols = ['smoker_code','sex_code', 'northeast', 'northwest', 'southeast', 'southwest']
categorical_data = medical_df[cat_cols].values

inputs = np.concatenate((scaled_inputs, categorical_data), axis=1)
targets = medical_df.charges

model = LinearRegression().fit(inputs, targets)

predictions = model.predict(inputs)
print('Prediction: ', predictions)

"""Create Testing Set"""

from sklearn.model_selection import train_test_split

inputs_train, inputs_test, targets_train, targets_test = train_test_split(inputs, targets, test_size=0.1)

model = LinearRegression().fit(inputs_train, targets_train)

predictions_test = model.predict(inputs_test)

print("Test Prediction ",predictions)

loss = rmse(targets_test, predictions_test)
print('Test Error: ',loss)
